apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rosa-hcp-provision
spec:
  results:
    - name: ocp-login-command
      description: Command to log in to the newly ephemeral OpenShift cluster.
  params:
    - name: ocp-version
      type: string
      description: The version of the OpenShift Container Platform (OCP) to deploy.
    - name: region
      type: string
      description: The AWS region where the OpenShift cluster will be created.
    - name: cluster-name
      type: string
      description: The name of the OpenShift cluster to be created.
    - name: machine-type
      type: string
      description: The type of AWS EC2 instance to use for the cluster nodes.
    - name: replicas
      type: string
      description: The number of worker nodes to provision in the cluster.
      default: '3'
    - name: aws-secrets
      type: string
      description: The secret containing the AWS credentials and other necessary details for cluster provisioning.
  steps:
    - name: provision
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      env:
        - name: CLUSTER_NAME
          value: "$(params.cluster-name)"
        - name: REGION
          value: "$(params.region)"
        - name: OCP_VERSION
          value: "$(params.ocp-version)"
        - name: MACHINE_TYPE
          value: "$(params.machine-type)"
        - name: ROSA_TOKEN
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "ROSA_TOKEN"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "AWS_ACCESS_KEY_ID"
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "AWS_SECRET_ACCESS_KEY"
        - name: BILLING_ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "AWS_ACCOUNT_ID"
        - name: AWS_OIDC_CONFIG_ID
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "AWS_OIDC_CONFIG_ID"
        - name: OPERATOR_ROLES_PREFIX
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "OPERATOR_ROLES_PREFIX"
        - name: SUBNET_IDS
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "SUBNET_IDS"
        - name: INSTALL_ROLE_ARN
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "INSTALL_ROLE_ARN"
        - name: SUPPORT_ROLE_ARN
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "SUPPORT_ROLE_ARN"
        - name: WORKER_ROLE_ARN
          valueFrom:
            secretKeyRef:
              name: "$(params.aws-secrets)"
              key: "WORKER_ROLE_ARN"
      script: |
        set -o errexit
        set -o nounset
        set -o pipefail

        config_aws_creds() {
            printf "INFO: Configuring AWS credentials...\n" 
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set region "$REGION"
        }

        print_debug_info() {
            printf "INFO: Printing debug information...\n" 
            rosa --region "$REGION" describe cluster --cluster="$CLUSTER_NAME"
        }

        # Check that all cluster operators are available
        check_cluster
